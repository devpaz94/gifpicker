{"ast":null,"code":"import _classCallCheck from \"/Users/robertparrish/non-work/code-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/robertparrish/non-work/code-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/robertparrish/non-work/code-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/robertparrish/non-work/code-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/robertparrish/non-work/code-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/robertparrish/non-work/code-test/src/App.js\";\nimport React from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./Styles.css\";\nimport Header from \"./components/Header\";\nimport GifGrid from \"./components/GifGrid\";\nimport { Form, Button } from \"react-bootstrap\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      gifs: [],\n      offset: 0,\n      currentGif: \"\",\n      searchInput: \"\"\n    };\n\n    _this.fetchData = function (keyWord) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;\n      var offset = _this.state.offset;\n\n      _this.setState({\n        currentGif: keyWord\n      });\n\n      var url = \"http://api.giphy.com/v1/gifs/search?api_key=smFg8BlXGx3Fv1uibDi6kK0MiFnLr1xx&q=\".concat(keyWord, \"&offset=\").concat(offset, \"&limit=\").concat(limit);\n      fetch(url).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this.setState({\n          gifs: _this.state.gifs.concat(data.data),\n          offset: offset + limit\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var keyWords = [\"Hamsters\", \"Dogs\", \"Penguins\", \"Cats\"];\n      var keyWord = keyWords[Math.floor(Math.random() * keyWords.length)];\n      this.fetchData(keyWord);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          currentGif = _this$state.currentGif,\n          gifs = _this$state.gifs;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Header, {\n        title: currentGif,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Form.Control, {\n        type: \"email\",\n        placeholder: \"Search GIF...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"primary\",\n        type: \"Search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Submit\")), \" \", React.createElement(InfiniteScroll, {\n        dataLength: gifs.length,\n        next: function next() {\n          _this2.fetchData(currentGif, 10);\n        },\n        hasMore: true,\n        loader: React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, \"Loading...\"),\n        scrollThreashold: 0.5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(GifGrid, {\n        gifs: gifs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/robertparrish/non-work/code-test/src/App.js"],"names":["React","InfiniteScroll","Header","GifGrid","Form","Button","App","state","gifs","offset","currentGif","searchInput","fetchData","keyWord","limit","setState","url","fetch","then","response","json","data","concat","keyWords","Math","floor","random","length","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./Styles.css\";\nimport Header from \"./components/Header\";\nimport GifGrid from \"./components/GifGrid\";\nimport { Form, Button } from \"react-bootstrap\";\n\nclass App extends React.Component {\n  state = {\n    gifs: [],\n    offset: 0,\n    currentGif: \"\",\n    searchInput: \"\"\n  };\n\n  fetchData = (keyWord, limit = 15) => {\n    const { offset } = this.state;\n    this.setState({ currentGif: keyWord });\n    const url = `http://api.giphy.com/v1/gifs/search?api_key=smFg8BlXGx3Fv1uibDi6kK0MiFnLr1xx&q=${keyWord}&offset=${offset}&limit=${limit}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          gifs: this.state.gifs.concat(data.data),\n          offset: offset + limit\n        });\n      });\n  };\n\n  componentDidMount() {\n    const keyWords = [\"Hamsters\", \"Dogs\", \"Penguins\", \"Cats\"];\n    const keyWord = keyWords[Math.floor(Math.random() * keyWords.length)];\n    this.fetchData(keyWord);\n  }\n\n  render() {\n    const { currentGif, gifs } = this.state;\n    return (\n      <div>\n        <Header title={currentGif} />\n        <Form>\n          <Form.Group>\n            <Form.Control type=\"email\" placeholder=\"Search GIF...\" />\n          </Form.Group>\n\n          <Button variant=\"primary\" type=\"Search\">\n            Submit\n          </Button>\n        </Form>{\" \"}\n        <InfiniteScroll\n          dataLength={gifs.length}\n          next={() => {\n            this.fetchData(currentGif, 10);\n          }}\n          hasMore={true}\n          loader={<h4>Loading...</h4>}\n          scrollThreashold={0.5}\n        >\n          <GifGrid gifs={gifs} />\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}