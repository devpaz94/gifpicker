{"ast":null,"code":"import _classCallCheck from \"/Users/robertparrish/non-work/gif-picker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/robertparrish/non-work/gif-picker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/robertparrish/non-work/gif-picker/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/robertparrish/non-work/gif-picker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/robertparrish/non-work/gif-picker/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/robertparrish/non-work/gif-picker/src/components/PopupWindow.js\";\nimport React, { Component } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { GifGrid, SearchBar } from \".\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"../Styles.css\";\n\nvar PopupWindow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PopupWindow, _React$Component);\n\n  function PopupWindow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PopupWindow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PopupWindow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      gifs: [],\n      offset: 0,\n      currentGif: \"\",\n      searchInput: \"\",\n      timeout: 0,\n      selectedGif: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(PopupWindow, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Modal, {\n        show: props.state.showModal,\n        onHide: props.hideModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"GIF Picker\")), React.createElement(Modal.Body, {\n        id: \"scrollableDiv\",\n        style: {\n          \"max-height\": \"calc(100vh - 210px)\",\n          \"overflow-y\": \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        inputHandler: props.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(InfiniteScroll, {\n        dataLength: gifs.length,\n        next: function next() {\n          console.log(\"hello\");\n          var offset = props.state.offset;\n          props.fetchData(currentGif, 6, offset);\n        },\n        hasMore: true,\n        scrollThreashold: 0.5,\n        scrollableTarget: \"scrollableDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(GifGrid, {\n        gifs: gifs,\n        selectGif: props.selectGif,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })))), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: props.hideModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        variant: \"primary\",\n        onClick: props.hideModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Select GIF\")));\n    }\n  }]);\n\n  return PopupWindow;\n}(React.Component);\n\nexport default PopupWindow;","map":{"version":3,"sources":["/Users/robertparrish/non-work/gif-picker/src/components/PopupWindow.js"],"names":["React","Component","Modal","Button","GifGrid","SearchBar","InfiniteScroll","PopupWindow","state","gifs","offset","currentGif","searchInput","timeout","selectedGif","props","showModal","hideModal","handleInputChange","length","console","log","fetchData","selectGif"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,GAAnC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAO,eAAP;;IAEMC,W;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,MAAM,EAAE,CAFF;AAGNC,MAAAA,UAAU,EAAE,EAHN;AAINC,MAAAA,WAAW,EAAE,EAJP;AAKNC,MAAAA,OAAO,EAAE,CALH;AAMNC,MAAAA,WAAW,EAAE;AANP,K;;;;;;6BAQC;AACP,aACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAEC,KAAK,CAACP,KAAN,CAAYQ,SAAzB;AAAoC,QAAA,MAAM,EAAED,KAAK,CAACE,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,EAIE,oBAAC,KAAD,CAAO,IAAP;AACE,QAAA,EAAE,EAAC,eADL;AAEE,QAAA,KAAK,EAAE;AACL,wBAAc,qBADT;AAEL,wBAAc;AAFT,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAEF,KAAK,CAACG,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,cAAD;AACE,QAAA,UAAU,EAAET,IAAI,CAACU,MADnB;AAEE,QAAA,IAAI,EAAE,gBAAM;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AADU,cAEFX,MAFE,GAESK,KAAK,CAACP,KAFf,CAEFE,MAFE;AAGVK,UAAAA,KAAK,CAACO,SAAN,CAAgBX,UAAhB,EAA4B,CAA5B,EAA+BD,MAA/B;AACD,SANH;AAOE,QAAA,OAAO,EAAE,IAPX;AAQE,QAAA,gBAAgB,EAAE,GARpB;AASE,QAAA,gBAAgB,EAAC,eATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWE,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAED,IAAf;AAAqB,QAAA,SAAS,EAAEM,KAAK,CAACQ,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CAFF,CAPF,CAJF,EA4BE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,OAAO,EAAER,KAAK,CAACE,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAIE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,OAAO,EAAEF,KAAK,CAACE,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CA5BF,CADF;AAuCD;;;;EAjDuBjB,KAAK,CAACC,S;;AAmDhC,eAAeM,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { GifGrid, SearchBar } from \".\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"../Styles.css\";\n\nclass PopupWindow extends React.Component {\n  state = {\n    gifs: [],\n    offset: 0,\n    currentGif: \"\",\n    searchInput: \"\",\n    timeout: 0,\n    selectedGif: \"\"\n  };\n  render() {\n    return (\n      <Modal show={props.state.showModal} onHide={props.hideModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>GIF Picker</Modal.Title>\n        </Modal.Header>\n        <Modal.Body\n          id=\"scrollableDiv\"\n          style={{\n            \"max-height\": \"calc(100vh - 210px)\",\n            \"overflow-y\": \"auto\"\n          }}\n        >\n          <div>\n            <SearchBar inputHandler={props.handleInputChange} />\n            <InfiniteScroll\n              dataLength={gifs.length}\n              next={() => {\n                console.log(\"hello\");\n                const { offset } = props.state;\n                props.fetchData(currentGif, 6, offset);\n              }}\n              hasMore={true}\n              scrollThreashold={0.5}\n              scrollableTarget=\"scrollableDiv\"\n            >\n              <GifGrid gifs={gifs} selectGif={props.selectGif} />\n            </InfiniteScroll>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={props.hideModal}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={props.hideModal}>\n            Select GIF\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\nexport default PopupWindow;\n"]},"metadata":{},"sourceType":"module"}